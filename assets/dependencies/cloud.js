!function(factory,exposeUMD){exposeUMD(this,factory)}((function(_,io,$,SAILS_LOCALS,location,File,FileList,FormData){function _representsOneOrMoreFiles(that){return _.isObject(that)&&(!!File&&that instanceof File||!!FileList&&that instanceof FileList||_.isArray(that)&&that.length>0&&_.all(that,(function(item){return!!File&&(_.isObject(item)&&item instanceof File)}))||!!File&&(_.isObject(that)&&_.isObject(that.file)&&that.file instanceof File)||_.isArray(that)&&that.length>0&&_.all(that,(function(item){return!!File&&(_.isObject(item)&&_.isObject(item.file)&&item.file instanceof File)})))}function _verifyErrorNegotiationRule(negotiationRule){if(_.isNumber(negotiationRule)&&Math.floor(negotiationRule)===negotiationRule){if(negotiationRule>599||negotiationRule<0)throw new Error("Invalid error negotiation rule: `"+negotiationRule+"`.  If a status code is provided, it must be between zero and 599.")}else if(!_.isString(negotiationRule)||!negotiationRule){var suffix="";throw(void 0===negotiationRule||_.isFunction(negotiationRule))&&(suffix="  Looking to tolerate or intercept **EVERY** error?  This usually isn't a good idea, because, just like some try/catch usage patterns, it could mean swallowing errors unexpectedly, which can make debugging a nightmare."),new Error("Invalid error negotiation rule: `"+negotiationRule+"`.  Please pass in a valid intercept rule string.  An intercept rule is either (A) the name of an exit or (B) a whole number representing the status code like `404` or `200`."+suffix)}}var Cloud={setup:function(options){if(options=options||{},!_.isObject(options.methods)||_.isArray(options.methods)||_.isFunction(options.methods))throw new Error("Cannot .setup() Cloud SDK: `methods` must be provided as a dictionary of addresses and definitions.");if(!options.apiBaseUrl){if(!location)throw new Error('Cannot .setup() Cloud SDK: Since a location cannot be determined, `apiBaseUrl` must be provided as a string (e.g. "https://example.com").');options.apiBaseUrl=location.protocol+"//"+location.hostname+(location.port?":"+location.port:"")}io&&(io.sails.url=options.apiBaseUrl);var DEFAULT_PROTOCOL_NAME="jQuery";if(options.methods.on)throw new Error("Cannot .setup() Cloud SDK: `.on()` is reserved.  It cannot be used as the name for a method.");if(options.methods.off)throw new Error("Cannot .setup() Cloud SDK: `.off()` is reserved.  It cannot be used as the name for a method.");var methods=_.reduce(options.methods,(function(memo,appLevelSdkEndpointDef,methodName){var _verbToCheck,_urlToCheck;if("setup"===methodName&&console.warn('"setup" is a confusing name for a cloud action (it conflicts with a built-in feature of this SDK itself).  Would "initialize()" work instead?  (Continuing this time...)'),"function"==typeof appLevelSdkEndpointDef);else{if(appLevelSdkEndpointDef&&"object"==typeof appLevelSdkEndpointDef)_verbToCheck=appLevelSdkEndpointDef.verb,_urlToCheck=appLevelSdkEndpointDef.url;else{if("string"!=typeof appLevelSdkEndpointDef)throw new Error("CloudSDK endpoint (`"+methodName+'`) is invalid:  Endpoints should be defined as either (1) a string like "GET /foo", (2) a dictionary containing a `verb` and a `url`, or (3) a function that returns a dictionary like that.');_verbToCheck=appLevelSdkEndpointDef.replace(/^\s*([^\/\s]+)\s*\/.*$/,"$1"),_urlToCheck=appLevelSdkEndpointDef.replace(/^\s*[^\/\s]+\s*\/(.*)$/,"/$1")}if("string"!=typeof _verbToCheck||""===_verbToCheck)throw new Error("CloudSDK endpoint (`"+methodName+"`) is invalid:  An endpoint's `verb` should be defined as a non-empty string.");if("string"!=typeof _urlToCheck||""===_urlToCheck)throw new Error("CloudSDK endpoint (`"+methodName+"`) is invalid:  An endpoint's `url` should be defined as a non-empty string.")}var _helpCallCloudMethod=function(argins){var _promise,requestInfo={verb:void 0,url:void 0,params:void 0,headers:void 0,protocolName:void 0,protocolInstance:void 0,lifecycleInstructions:[]},deferred={headers:function(_customRequestHeaders){if(!_.isObject(_customRequestHeaders))throw new Error("Invalid request headers: Must be specified as a dictionary, where each key has a string value.");return requestInfo.headers=_.extend(requestInfo.headers||{},_customRequestHeaders),deferred},protocol:function(_protocolNameOrInstance){if("string"==typeof _protocolNameOrInstance)switch(_protocolNameOrInstance){case"jQuery":if(requestInfo.protocolName="jQuery",void 0===$)throw new Error("Could not access jQuery: `$` is undefined.");requestInfo.protocolInstance=$;break;case"io.socket":if(requestInfo.protocolName="io.socket",void 0===io)throw new Error("Could not access `io.socket`: `io` is undefined.");if("function"!=typeof io)throw new Error("Could not access `io.socket`: `io` is invalid:"+io);if(void 0===io.socket)throw new Error("Could not access `io.socket`: `io` does not have a `socket` property.  Make sure `sails.io.js` is being injected in a <script> tag!");requestInfo.protocolInstance=io.socket;break;default:throw new Error("Unrecognized protocol: `"+_protocolNameOrInstance+'`. Use "jQuery" or "io.socket".')}else{if(!_.isObject(_protocolNameOrInstance)&&!_.isFunction(_protocolNameOrInstance))throw new Error("Unrecognized protocol: `"+_protocolNameOrInstance+'`. Use "jQuery" or "io.socket".');if("jQuery"===_protocolNameOrInstance.name)requestInfo.protocolName="jQuery",requestInfo.protocolInstance=_protocolNameOrInstance;else if("SailsSocket"===_protocolNameOrInstance.constructor.name)requestInfo.protocolName="io.socket",requestInfo.protocolInstance=_protocolNameOrInstance;else{if("[Package: machinepack-http]"!==_protocolNameOrInstance.toString()&&"[Package: sails.helpers.http]"!==_protocolNameOrInstance.toString())throw new Error("Unrecognized instance provided to `.protocol()`: `"+_protocolNameOrInstance+"`");requestInfo.protocolName="machinepack-http",requestInfo.protocolInstance=_protocolNameOrInstance}}return deferred},intercept:function(negotiationRule,handler){if(_verifyErrorNegotiationRule(negotiationRule),!_.isFunction(handler))throw new Error("Invalid 2nd argument to `.intercept()`.  Expecting a handler function.");return requestInfo.lifecycleInstructions.push({type:"intercept",rule:negotiationRule,handler:handler}),deferred},tolerate:function(_negotiationRuleMaybe,_handlerMaybe){var handler,negotiationRule;if(void 0===_handlerMaybe&&_.isFunction(_negotiationRuleMaybe)?handler=_negotiationRuleMaybe:(negotiationRule=_negotiationRuleMaybe,handler=_handlerMaybe),void 0!==negotiationRule&&_verifyErrorNegotiationRule(negotiationRule),void 0!==handler&&!_.isFunction(handler))throw new Error("Invalid 2nd argument. to `.tolerate()`.  Expecting a handler function.");return requestInfo.lifecycleInstructions.push({type:"tolerate",rule:negotiationRule,handler:handler||function(){}}),deferred},then:function(){var promise=deferred.toPromise();return promise.then.apply(promise,arguments)},toPromise:function(){if("undefined"==typeof Promise)throw new Error("Cannot use this approach: `Promise` constructor not available in current environment.");return _promise||(_promise=new Promise((function(resolve,reject){try{deferred.exec((function(err,resultMaybe){return err?reject(err):resolve(resultMaybe)}))}catch(err){reject(err)}})))},exec:function(exitCallbacks){if(exitCallbacks){if(!_.isObject(exitCallbacks)&&!_.isFunction(exitCallbacks))throw new Error("If specified, the argument passed to `.exec()` must be a dictionary containing a `success` and `error` callback.  Alternatively, you can use a Node.js-style callback.");if(_.isObject(exitCallbacks)&&exitCallbacks.success&&!_.isFunction(exitCallbacks.success))throw new Error("If specified, `success` callback must be a function.");if(_.isObject(exitCallbacks)&&exitCallbacks.error&&!_.isFunction(exitCallbacks.error))throw new Error("If specified, `error` callback must be a function.")}var errorInstance=new Error("Endpoint (`"+methodName+"`) responded with an error (or the request failed).");errorInstance.name="CloudError",_.isObject(SAILS_LOCALS)&&void 0!==SAILS_LOCALS._csrf&&(_.isUndefined(requestInfo.headers)&&(requestInfo.headers={}),requestInfo.headers["x-csrf-token"]||(requestInfo.headers["x-csrf-token"]=SAILS_LOCALS._csrf)),function(proceed){var textParamsByFieldName=requestInfo.params,uploadsByFieldName={};if(FormData&&textParamsByFieldName&&(textParamsByFieldName=_.extend({},textParamsByFieldName),_.each(textParamsByFieldName,(function(value,fieldName){_representsOneOrMoreFiles(value)&&(uploadsByFieldName[fieldName]=value,delete textParamsByFieldName[fieldName])}))),_.keys(uploadsByFieldName).length>0){if(requestInfo.verb.match(/get/i))throw new Error("Detected File or FileList instance(s) provided for parameter(s):  "+_.keys(uploadsByFieldName)+"\nBut this is a nullipotent ("+requestInfo.verb.toUpperCase()+") request, which does not support file uploads.");if(!FormData)throw new Error("Detected File or FileList instance(s) provided for parameter(s):  "+_.keys(uploadsByFieldName)+"\nBut the native FormData constructor does not exist!")}switch(requestInfo.protocolName){case"jQuery":return function(){var thisJQuery=requestInfo.protocolInstance,ajaxOpts={url:requestInfo.url,method:requestInfo.verb};if(requestInfo.verb.match(/get/i))ajaxOpts.data=textParamsByFieldName;else if(_.keys(uploadsByFieldName).length>0)ajaxOpts.processData=!1,ajaxOpts.contentType=!1,ajaxOpts.data=new FormData,_.each(textParamsByFieldName,(function(value,fieldName){if(void 0!==value)if(_.isString(value))ajaxOpts.data.append(fieldName,value);else{var stringifiedValue;requestInfo.headers=requestInfo.headers||{},requestInfo.headers["X-JSON-MPU-Params"]?requestInfo.headers["X-JSON-MPU-Params"]+=","+fieldName:requestInfo.headers["X-JSON-MPU-Params"]=fieldName;try{stringifiedValue=JSON.stringify(value)}catch(unusedErr){throw new Error("Could not encode value provided for "+fieldName+" because the value is (or contains) "+"data that cannot be stringified as JSON (usually, this means it contains circular references-- i.e. its properties or array items are actually references to itself, or each other)"+".  In a request that contains one or more file uploads, any additional text parameter values need to be encoded in such a way that they can be losslessly parsed by the Sails framework.\n [?] Unsure?  Reach out at https://sailsjs.com/support")}ajaxOpts.data.append(fieldName,stringifiedValue)}})),_.each(uploadsByFieldName,(function(fileOrFileList,fieldName){if(void 0!==fileOrFileList){if(!_representsOneOrMoreFiles(fileOrFileList))throw new Error('Cannot upload as "'+fieldName+"\" because the provided value is not a File instance, an array of File instances, a dictionary like `{file: someFileInstance, name: 'filename-override.png'}`, or an array of such wrapper dictionaries.  Instead, got: "+fileOrFileList+"\n\nNote that this can sometimes occur due to problems with code minification (e.g. uglify configuration).");if(_.isArray(fileOrFileList)||_.isObject(fileOrFileList)&&_.isObject(fileOrFileList.constructor)&&"FileList"===fileOrFileList.constructor.name)for(var i=0;i<fileOrFileList.length;i++)fileOrFileList[i]instanceof File?ajaxOpts.data.append(fieldName,fileOrFileList[i],fileOrFileList[i].name):ajaxOpts.data.append(fieldName,fileOrFileList[i].file,fileOrFileList[i].name||fileOrFileList[i].file.name);else fileOrFileList instanceof File?ajaxOpts.data.append(fieldName,fileOrFileList,fileOrFileList.name):ajaxOpts.data.append(fieldName,fileOrFileList.file,fileOrFileList.name||fileOrFileList.file.name)}}));else{var sanitizedTPBFN=_.mapValues(textParamsByFieldName,(function(value){var sanitizedValue;return _.isArray(value)?(sanitizedValue=_.clone(value),_.remove(sanitizedValue,(function(item){return void 0===item}))):sanitizedValue=value,sanitizedValue}));ajaxOpts.data=JSON.stringify(sanitizedTPBFN),ajaxOpts.processData=!1,ajaxOpts.contentType="application/json; charset=UTF-8"}void 0!==requestInfo.headers&&(ajaxOpts.headers=requestInfo.headers),thisJQuery.ajax(_.extend(ajaxOpts,{error:function(jqXHR){return proceed(void 0,{body:void 0===jqXHR.responseJSON?jqXHR.responseText:jqXHR.responseJSON,statusCode:jqXHR.status,headers:_.reduce(jqXHR.getAllResponseHeaders().split(/\n/),(function(memo,pair){var splitPair=pair.split(/:/),headerName=splitPair[0];if(""===headerName)return memo;var headerVal=splitPair.slice(1).join("").replace(/^\s*/,"").replace(/\s*$/,"");memo[headerName]=headerVal;var allLowercaseHeaderName=headerName.toLowerCase();return allLowercaseHeaderName!==headerName&&(memo[allLowercaseHeaderName]=headerVal),memo}),{})})},success:function(unused0,unused1,jqXHR){return proceed(void 0,{body:void 0===jqXHR.responseJSON?jqXHR.responseText:jqXHR.responseJSON,statusCode:jqXHR.status,headers:_.reduce(jqXHR.getAllResponseHeaders().split(/\n/),(function(memo,pair){var splitPair=pair.split(/:/),headerName=splitPair[0];if(""===headerName)return memo;var headerVal=splitPair.slice(1).join("").replace(/^\s*/,"").replace(/\s*$/,"");memo[headerName]=headerVal;var allLowercaseHeaderName=headerName.toLowerCase();return allLowercaseHeaderName!==headerName&&(memo[allLowercaseHeaderName]=headerVal),memo}),{})})}}))}();case"io.socket":return function(){var socket=requestInfo.protocolInstance;if(File&&requestInfo.params&&_.each(requestInfo.params,(function(value,fieldName){if(_representsOneOrMoreFiles(value))throw new Error('Detected File-like data provided for the "'+fieldName+"\" parameter -- but file uploads are not currently supported using WebSockets / Socket.io.  Please call this method using a different request protocol (e.g. `protocol: 'jQuery'`)")})),!socket.isConnected()&&!socket.isConnecting()&&!socket.mightBeAboutToAutoConnect())return proceed(void 0,{body:null,statusCode:0,headers:{}});socket.request({method:requestInfo.verb,url:requestInfo.url,data:requestInfo.params,headers:requestInfo.headers},(function(unused,jwres){return proceed(void 0,{body:jwres.body,statusCode:jwres.statusCode,headers:jwres.headers})}))}();case"machinepack-http":return function(){requestInfo.params&&_.each(requestInfo.params,(function(value,fieldName){if(_representsOneOrMoreFiles(value))throw new Error('Detected File-like data provided for the "'+fieldName+'" parameter -- but file uploads are not currently supported in Cloud SDK when using "machinepack-http".  Please call this method using a different request protocol.')}));var mpHttpOpts={url:requestInfo.url,method:requestInfo.verb};requestInfo.verb.match(/get/i)?mpHttpOpts.qs=textParamsByFieldName:mpHttpOpts.body=textParamsByFieldName,void 0!==requestInfo.headers&&(mpHttpOpts.headers=requestInfo.headers),requestInfo.protocolInstance.sendHttpRequest.with(mpHttpOpts).switch({error:function(err){return proceed(err)},requestFailed:function(err){return proceed(void 0,{body:err.message,statusCode:0,headers:{}})},non200Response:function(serverResponse){return proceed(void 0,serverResponse)},success:function(serverResponse){""===serverResponse.body&&(serverResponse.body=null);try{serverResponse.body=JSON.parse(serverResponse.body)}catch(err){}return proceed(void 0,serverResponse)}})}();default:throw new Error("Consistency violation: Unexpected protocol name received (`"+requestInfo.protocolName+"`)-- but it should have already been checked!")}}((function(err,responseInfo){if(err)throw new Error("Consistency violation: Unexpected error in CloudSDK. Details: "+err.stack);_.isUndefined(responseInfo.body)||(responseInfo.data=responseInfo.body);var xExitResponseHeaderValue=responseInfo.headers["x-exit"]||responseInfo.headers["X-Exit"];"_offline"===xExitResponseHeaderValue&&console.warn("Unconventional exit detected:  `_offline` is a reserved exit name for use on the front-end, and should not be used willy nilly.  Instead, please come up with a different exit name for this scenario."),0===responseInfo.statusCode?responseInfo.exit="_offline":xExitResponseHeaderValue?responseInfo.exit=xExitResponseHeaderValue:responseInfo.statusCode<200||responseInfo.statusCode>=300?responseInfo.exit="error":responseInfo.exit="success",responseInfo.code=responseInfo.exit;var matchingLifecycleInstruction=_.find(requestInfo.lifecycleInstructions,(function(lifecycleInstruction){return void 0===lifecycleInstruction.rule?!("success"===responseInfo.exit||responseInfo.statusCode>=200&&responseInfo.statusCode<300):responseInfo.statusCode===lifecycleInstruction.rule||(responseInfo.exit===lifecycleInstruction.rule||void 0)}));!function(proceed){if(!matchingLifecycleInstruction)return proceed();var resultFromHandler;if("AsyncFunction"===matchingLifecycleInstruction.handler.constructor.name)return proceed(new Error("`async` functions are not *yet* fully supported in intercept/tolerate"));try{errorInstance.exit=responseInfo.exit,errorInstance.code=responseInfo.exit,errorInstance.responseInfo=responseInfo,resultFromHandler=matchingLifecycleInstruction.handler(errorInstance)}catch(err){return!1===err?proceed(void 0,!0):proceed(err)}proceed(void 0,resultFromHandler)}((function(err,resultFromInterceptOrTolerate){if(err)throw new Error("The provided custom intercept/tolerate logic threw an unexpected, uncaught error: "+err.stack);if(matchingLifecycleInstruction&&("success"===responseInfo.exit||responseInfo.statusCode>=200&&responseInfo.statusCode<300))throw new Error("Unexpected intercept/tolerate logic matched a 2xx/success response, but these methods should only be used for exceptions!");var tolerateAsIfSuccess=matchingLifecycleInstruction&&"tolerate"===matchingLifecycleInstruction.type;if(matchingLifecycleInstruction&&"intercept"===matchingLifecycleInstruction.type){if(!_.isError(resultFromInterceptOrTolerate))throw new Error("Unexpected value returned from .intercept() handler.  Expected an Error instance but instead, got: "+resultFromInterceptOrTolerate);errorInstance=resultFromInterceptOrTolerate}var UNHANDLED_ERR_PREFIX_MSG=(0===responseInfo.statusCode?"Unable to send request... are the client and server both online?":"Received unhandled "+responseInfo.statusCode+" error from server.")+"  (See `responseInfo` property of this error for details).  Note that you can negotiate any error using its `exit` or `responseInfo.statusCode` properties.\n--\n";if(_.isFunction(exitCallbacks))return tolerateAsIfSuccess?exitCallbacks(void 0,resultFromInterceptOrTolerate,responseInfo):"success"===responseInfo.exit||responseInfo.statusCode>=200&&responseInfo.statusCode<300?exitCallbacks(void 0,responseInfo.body,responseInfo):(errorInstance.stack+="\n\nError Summary:\n(see `.responseInfo` for more details)\n·-------------·----------------------------------------·\n|    Protocol | "+("jQuery"===requestInfo.protocolName?"http(s)://   (jQuery)":"io.socket"===requestInfo.protocolName?"ws(s)://   (io.socket)":requestInfo.protocolName)+"\n|     Address | "+requestInfo.verb.toUpperCase()+" "+requestInfo.url+"\n|        Exit | "+responseInfo.exit+"\n| Status Code | "+responseInfo.statusCode+"\n·-------------·----------------------------------------·",void 0!==responseInfo.body&&(errorInstance.stack+="\n\nResponse Body:\n"+responseInfo.body),errorInstance.responseInfo=responseInfo,errorInstance.exit=responseInfo.exit,errorInstance.code=responseInfo.exit,exitCallbacks(errorInstance,void 0!==responseInfo.body?responseInfo.body:errorInstance,responseInfo));if(!_.isObject(exitCallbacks)){if(_.isUndefined(exitCallbacks)){if(tolerateAsIfSuccess||"success"===responseInfo.exit||responseInfo.statusCode>=200&&responseInfo.statusCode<300)return;throw errorInstance.stack+="\n\nError Summary:\n(see `.responseInfo` for more details)\n·-------------·----------------------------------------·\n|    Protocol | "+("jQuery"===requestInfo.protocolName?"http(s)://   (jQuery)":"io.socket"===requestInfo.protocolName?"ws(s)://   (io.socket)":requestInfo.protocolName)+"\n|     Address | "+requestInfo.verb.toUpperCase()+" "+requestInfo.url+"\n|        Exit | "+responseInfo.exit+"\n| Status Code | "+responseInfo.statusCode+"\n·-------------·----------------------------------------·",void 0!==responseInfo.body&&(errorInstance.stack+="\n\nResponse Body:\n"+responseInfo.body),errorInstance.stack=UNHANDLED_ERR_PREFIX_MSG+errorInstance.stack,errorInstance.responseInfo=responseInfo,errorInstance}throw new Error("Invalid usage of Cloud.*() method.  Provide either a dictionary of callbacks, a single callback function, or NOTHING to `.exec()`.")}if("error"!==responseInfo.exit&&exitCallbacks[responseInfo.exit])return void 0!==responseInfo.body?exitCallbacks[responseInfo.exit](tolerateAsIfSuccess?resultFromInterceptOrTolerate:responseInfo.body,responseInfo):tolerateAsIfSuccess||"success"===responseInfo.exit||responseInfo.statusCode>=200&&responseInfo.statusCode<300?exitCallbacks.success(tolerateAsIfSuccess?resultFromInterceptOrTolerate:void 0,responseInfo):(errorInstance.stack+="\n\nError Summary:\n(see `.responseInfo` for more details)\n·-------------·----------------------------------------·\n|    Protocol | "+("jQuery"===requestInfo.protocolName?"http(s)://   (jQuery)":"io.socket"===requestInfo.protocolName?"ws(s)://   (io.socket)":requestInfo.protocolName)+"\n|     Address | "+requestInfo.verb.toUpperCase()+" "+requestInfo.url+"\n|        Exit | "+responseInfo.exit+"\n| Status Code | "+responseInfo.statusCode+"\n·-------------·----------------------------------------·",void 0!==responseInfo.body&&(errorInstance.stack+="\n\nResponse Body:\n"+responseInfo.body),errorInstance.responseInfo=responseInfo,errorInstance.exit=responseInfo.exit,errorInstance.code=responseInfo.exit,exitCallbacks[responseInfo.exit](errorInstance,responseInfo));if(!(tolerateAsIfSuccess||"success"===responseInfo.exit||responseInfo.statusCode>=200&&responseInfo.statusCode<300)){if(exitCallbacks.error)return errorInstance.stack+="\n\nError Summary:\n(see `.responseInfo` for more details)\n·-------------·----------------------------------------·\n|    Protocol | "+("jQuery"===requestInfo.protocolName?"http(s)://   (jQuery)":"io.socket"===requestInfo.protocolName?"ws(s)://   (io.socket)":requestInfo.protocolName)+"\n|     Address | "+requestInfo.verb.toUpperCase()+" "+requestInfo.url+"\n|        Exit | "+responseInfo.exit+"\n| Status Code | "+responseInfo.statusCode+"\n·-------------·----------------------------------------·",void 0!==responseInfo.body&&(errorInstance.stack+="\n\nResponse Body:\n"+responseInfo.body),errorInstance.responseInfo=responseInfo,errorInstance.exit=responseInfo.exit,errorInstance.code=responseInfo.code,exitCallbacks.error(errorInstance,responseInfo);throw errorInstance.stack+="\n\nError Summary:\n(see `.responseInfo` for more details)\n·-------------·----------------------------------------·\n|    Protocol | "+("jQuery"===requestInfo.protocolName?"http(s)://   (jQuery)":"io.socket"===requestInfo.protocolName?"ws(s)://   (io.socket)":requestInfo.protocolName)+"\n|     Address | "+requestInfo.verb.toUpperCase()+" "+requestInfo.url+"\n|        Exit | "+responseInfo.exit+"\n| Status Code | "+responseInfo.statusCode+"\n·-------------·----------------------------------------·",void 0!==responseInfo.body&&(errorInstance.stack+="\n\nResponse Body:\n"+responseInfo.body),errorInstance.stack=UNHANDLED_ERR_PREFIX_MSG+errorInstance.stack,errorInstance.responseInfo=responseInfo,errorInstance}return exitCallbacks.success?exitCallbacks.success(tolerateAsIfSuccess?resultFromInterceptOrTolerate:responseInfo.body,responseInfo):void 0}))}))},switch:function(){deferred.exec.apply(deferred,arguments)},log:function(){console.log("Running with `.log()`..."),this.exec((function(err,result){if(err)return console.error(),console.error("- - - - - - - - - - - - - - - - - - - - - - - -"),console.error("An error occurred:"),console.error(),console.error(err),console.error("- - - - - - - - - - - - - - - - - - - - - - - -"),void console.error();console.log(),_.isUndefined(result)?(console.log("- - - - - - - - - - - - - - - - - - - - - - - -"),console.log("Finished successfully."),console.log(),console.log("(There was no result.)"),console.log("- - - - - - - - - - - - - - - - - - - - - - - -")):(console.log("- - - - - - - - - - - - - - - - - - - - - - - -"),console.log("Finished successfully."),console.log(),console.log("Result:"),console.log(),console.log(result),console.log("- - - - - - - - - - - - - - - - - - - - - - - -")),console.log()}))}};if("function"==typeof appLevelSdkEndpointDef){var returnedFromEndpointDefFn=appLevelSdkEndpointDef.apply(this,argins);if("object"!=typeof returnedFromEndpointDefFn)throw new Error("Consistency violation: Function for CloudSDK endpoint (`"+methodName+"`) returned an invalid result.  The return value of the specified function is not a dictionary!  If a function is supplied for an endpoint definition, it must return a dictionary containing a `verb` and a `url`.  The returned dictionary may also contain dynamic, per-request header & parameter values.");_.isUndefined(returnedFromEndpointDefFn.headers)?options.headers&&(deferred=deferred.headers(options.headers)):deferred=deferred.headers(returnedFromEndpointDefFn.headers),_.isUndefined(returnedFromEndpointDefFn.protocol)?options.protocol?deferred.protocol(options.protocol):deferred.protocol(DEFAULT_PROTOCOL_NAME):deferred=deferred.protocol(returnedFromEndpointDefFn.protocol),requestInfo.verb=returnedFromEndpointDefFn.verb,requestInfo.url=returnedFromEndpointDefFn.url,requestInfo.params=argins}else if(appLevelSdkEndpointDef&&"object"==typeof appLevelSdkEndpointDef)_.isUndefined(appLevelSdkEndpointDef.headers)?options.headers&&(deferred=deferred.headers(options.headers)):deferred.headers(appLevelSdkEndpointDef.headers),_.isUndefined(appLevelSdkEndpointDef.protocol)?options.protocol?deferred.protocol(options.protocol):deferred.protocol(DEFAULT_PROTOCOL_NAME):deferred.protocol(appLevelSdkEndpointDef.protocol),requestInfo.verb=appLevelSdkEndpointDef.verb,requestInfo.url=appLevelSdkEndpointDef.url,requestInfo.params=argins;else{if("string"!=typeof appLevelSdkEndpointDef)throw new Error("Consistency violation: Something happened to CloudSDK endpoint (`"+methodName+'`).  This was not noticed initially when building up CloudSDK endpoints, but this endpoint is now invalid.  Endpoints should be defined as either (1) a string like "GET /foo", (2) a dictionary containing a `verb` and a `url`, or (3) a function that returns a dictionary like that.');options.headers&&(deferred=deferred.headers(options.headers)),options.protocol?deferred.protocol(options.protocol):deferred.protocol(DEFAULT_PROTOCOL_NAME),requestInfo.verb=appLevelSdkEndpointDef.replace(/^\s*([^\/\s]+)\s*\/.*$/,"$1"),requestInfo.url=appLevelSdkEndpointDef.replace(/^\s*[^\/\s]+\s*\/(.*)$/,"/$1"),requestInfo.params=argins}var routeParameters={};if(requestInfo.url.replace(/(\:[^\/\:\.\?]+\??)/g,(function($all,$1){var routeParamName=$1.replace(/^\:/,"").replace(/\??$/,"");if($1.match(/\?$/))requestInfo.params&&requestInfo.params[routeParamName]&&(routeParameters[routeParamName]=requestInfo.params[routeParamName]);else{if(!requestInfo.params||void 0===requestInfo.params[routeParamName])throw new Error("Missing required param: `"+routeParamName+"`");routeParameters[routeParamName]=requestInfo.params[routeParamName]}})),requestInfo.params=_.omit(requestInfo.params,_.keys(routeParameters)),requestInfo.url=requestInfo.url.replace(/(\:[^\/\:\.\?]+\??)/g,(function($all,$1){var routeParamName=$1.replace(/^\:/,"").replace(/\??$/,"");return void 0===routeParameters[routeParamName]?"":routeParameters[routeParamName]})),requestInfo.url=options.apiBaseUrl+requestInfo.url,!requestInfo.verb)throw new Error("CloudSDK endpoint (`"+methodName+"`) is invalid: No HTTP verb specified.  Please specify an HTTP verb (e.g. `GET`, `POST`, etc.)");return requestInfo.verb=(requestInfo.verb||"get").toLowerCase(),deferred.requestInfo=requestInfo,deferred};return memo[methodName]=function(){if(!appLevelSdkEndpointDef.args&&arguments.length>0)throw new Error("Cannot call this Cloud.*() method with serial usage because Cloud SDK is not aware of the appropriate parameter names!  Please pass in named parameter values using .with({…}) instead--or if you're the implementor of the corresponding Sails action, change it on the backend and regenerate the SDK so that this method is configured with an `args` array.\n [?] If you're unsure, visit https://sailsjs.com/support for help.");var argins=_.reduce(arguments,(function(argins,argin,i){if(!appLevelSdkEndpointDef.args[i])throw new Error("Invalid usage with serial arguments: Received unexpected "+(0===i?"first":1===i?"second":2===i?"third":i+1+"th")+" argument.");if("{*}"===appLevelSdkEndpointDef.args[i]){if(void 0!==argin&&(!_.isObject(argin)||_.isArray(argin)||_.isFunction(argin)))throw new Error("Invalid usage with serial arguments: If provided, expected "+(0===i?"first":1===i?"second":2===i?"third":i+1+"th")+" argument to be a dictionary (plain JavaScript object, like `{}`).  But instead, got: "+argin);if(void 0!==argin&&_.intersection(_.keys(argins),_.keys(argin)).length>0)throw new Error("Invalid usage with serial arguments: If provided, expected "+(0===i?"first":1===i?"second":2===i?"third":i+1+"th")+" argument to have keys which DO NOT overlap with other already-configured argins!  But in reality, it contained conflicting keys: "+_.intersection(_.keys(argins),_.keys(argin)));_.extend(argins,argin)}else argins[appLevelSdkEndpointDef.args[i]]=argin;return argins}),{});return _helpCallCloudMethod(argins)},memo[methodName].with=function(argins){return _helpCallCloudMethod(argins)},memo}),{});delete Cloud.setup,_.extend(Cloud,methods),Cloud.on=function(socketEventName,handleSocketMsg){if(!socketEventName||!_.isString(socketEventName))throw new Error("Invalid usage for `Cloud.on()`: Must pass in a valid first argument (a string; the name of the socket event to listen for -- i.e. the variety of incoming WebSocket messages to receive and handle).");if(!handleSocketMsg)throw new Error("Invalid usage for `Cloud.on()`: Must pass in a second argument (the function to run every time this WebSocket event is received).");if(!io||!io.socket)throw new Error("Could not bind a cloud event listener with `Cloud.on()`: WebSocket support is not currently available (`io.socket` is not available).  Make sure `sails.io.js` is being injected in a <script> tag!");var actualHandler;if(!_.isObject(handleSocketMsg)||_.isArray(handleSocketMsg)||_.isFunction(handleSocketMsg)){if(!_.isFunction(handleSocketMsg))throw new Error('Invalid usage for `Cloud.on()`: Second argument must either be a function (the function to run every time this socket event is received) or a dictionary of functions that will be negotiated and routed to based on the incoming message\'s conventional "verb" property (e.g. `{ "bankWireReceived": (msg)=>{…}, "destroyed": (msg)=>{…}, "*": (msg)=>{…} }`.');actualHandler=handleSocketMsg}else actualHandler=function(msg){var handlerToRun;if(_.contains(_.keys(handleSocketMsg),msg.verb))handlerToRun=handleSocketMsg[msg.verb];else{if(!handleSocketMsg["*"])throw new Error('Unhandled "'+socketEventName+'" cloud event:  Received an incoming WebSocket message with an unrecognized "verb" property: "'+msg.verb+"\".  If this was deliberate, register another key in the call to `Cloud.on('"+socketEventName+"', {…, "+msg.verb+': (msg)=>{…} })` to recognize this new sub-category of cloud event and handle it accordingly.  Otherwise, if you\'d like to silently ignore messages with other "verb"s (or no "verb" at all), then pass a function in to Cloud.on(), instead of a dictionary -- or register a "*" key as a catchall, and make its function a no-op.');handlerToRun=handleSocketMsg["*"]}try{handlerToRun(msg)}catch(err){if(!_.isObject(err))throw err;throw err.message='An uncaught error was thrown while handling an incoming WebSocket message (a "'+socketEventName+'" cloud event).  '+err.message,err}};return io.socket.on(socketEventName,actualHandler),actualHandler},Cloud.off=function(socketEventName,specificHandler){if(!socketEventName||!_.isString(socketEventName))throw new Error("Invalid usage for `Cloud.off()`: Must pass in a first argument (a string; the name of the socket event to stop listening for -- i.e. the variety of incoming WebSocket messages to reject and ignore).");if(void 0!==specificHandler&&!_.isFunction(specificHandler))throw new Error("Invalid usage for `Cloud.off()`: If a second argument is provided, it should be a function  (the specific handler you want to stop running every time a matching WebSocket message is received).");if(!io||!io.socket)throw new Error("Could not stop listening to cloud events with `Cloud.off()`: WebSocket support is not currently available (`io.socket` is not available).  Make sure `sails.io.js` is being injected in a <script> tag!");io.socket.off(socketEventName,specificHandler)}}};return Cloud}),(function(global,factory){var _,io,$,SAILS_LOCALS,location,File,FileList,FormData;if(void 0!==global.location&&global.location&&"object"==typeof global.location&&("Location"===global.location.constructor.name||"[object Location]"===global.location.constructor.toString()||_.isObject(global.location)&&global.location.href)&&(location=global.location),void 0!==global.File&&global.File&&"function"==typeof global.File&&"File"===global.File.name&&(File=global.File),void 0!==global.FileList&&global.FileList&&"function"==typeof global.FileList&&"FileList"===global.FileList.name&&(FileList=global.FileList),void 0!==global.FormData&&global.FormData&&"function"==typeof global.FormData&&"FormData"===global.FormData.name&&(FormData=global.FormData),"object"==typeof exports&&"undefined"!=typeof module){var _require=require,_module=module;if(void 0===_)try{_=_require("@sailshq/lodash")}catch(e){if("MODULE_NOT_FOUND"!==e.code)throw e}if(void 0===_)try{_=_require("lodash")}catch(e){if("MODULE_NOT_FOUND"!==e.code)throw e}try{$=_require("jquery")}catch(e){if("MODULE_NOT_FOUND"!==e.code)throw e}try{io=_require("socket.io-client"),(io=_require("sails.io.js")(io)).sails.environment="production"}catch(err){if("MODULE_NOT_FOUND"!==err.code)throw err;io=void 0}SAILS_LOCALS=void 0,_module.exports=factory(_,io,$,SAILS_LOCALS,location,File,FileList,FormData)}else{if("function"==typeof define&&define.amd)throw new Error("Global `define()` function detected, but built-in AMD support in `cloud.js` is not currently recommended.  To resolve this, modify `cloud.js`.");if(!global._)throw new Error("`_` global does not exist on the page yet. (If you're using Sails, please check dependency loading order in pipeline.js and make sure the Lodash library is getting brought in before `cloud`.)");if(_=global._,void 0!==global.io){if("function"!=typeof global.io)throw new Error("Could not access `io.socket`: The `io` global is invalid at the moment:"+global.io+"\n(If you're using Sails, please check dependency loading order in pipeline.js and make sure the sails.io.js library is getting brought in before `cloud`.)");if(void 0===global.io.socket)throw new Error("Could not access `io.socket`: `io` does not have a `socket` property.  Make sure `sails.io.js` is being injected in a <script> tag!");io=global.io}if(void 0!==global.$){if("function"!=typeof global.$)throw new Error("The `$` global is not valid at the moment:"+global.$+"\n(If you're using Sails, please check dependency loading order in pipeline.js and make sure the jQuery library is getting brought in before `cloud`.)");$=global.$}if(void 0!==global.SAILS_LOCALS){if(!_.isObject(global.SAILS_LOCALS))throw new Error("The `SAILS_LOCALS` global is not valid at the moment:"+global.SAILS_LOCALS+"\n(Please check and make sure you are using `<%- exposeLocalsToBrowser() %>` in your server-side view *before* the rest of your scripts.)");SAILS_LOCALS=global.SAILS_LOCALS}if(global.Cloud)throw new Error("Cannot expose global variable: Conflicting global (`cloud`) already exists!");global.Cloud=factory(_,io,$,SAILS_LOCALS,location,File,FileList,FormData)}}));