parasails.registerComponent("stripeCardElement",{props:["stripePublishableKey","isErrored","errorMessage","value","busy","showExisting"],template:'\n  <div>\n    <div v-if="existingCardData">\n      <span class="existing-card">{{existingCardData.billingCardBrand}} ending in <strong>{{existingCardData.billingCardLast4}}</strong></span>\n      <small class="new-card-text d-inline-block ml-2">(Want to use a different card ? <a class="text-primary change-card-button" type="button" @click="clickChangeExistingCard()">Click here</a>.)</small>\n    </div>\n    <div class="card-element-wrapper" :class="[existingCardData ? \'secret-card-element-wrapper\' : \'\', isErrored ? \'is-invalid\' : \'\']" :aria-hidden="existingCardData ? true : false">\n      <div class="card-element form-control" :class="isErrored ? \'is-invalid\' : \'\'" card-element></div>\n      <span class="status-indicator syncing text-primary" :class="[isSyncing ? \'\' : \'hidden\']"><span class="fa fa-spinner"></span></span>\n      <span class="status-indicator text-primary" :class="[isValidated ? \'\' : \'hidden\']"><span class="fa fa-check-circle"></span></span>\n      <div class="invalid-feedback" v-if="!isValidated && isErrored">{{ errorMessage || \'Please check your card info.\'}}</div>\n    </div>\n  </div>\n  ',data:function(){return{isSyncing:!1,isValidated:!1,existingCardData:void 0,_stripe:void 0,_elements:void 0,_element:void 0}},beforeMount:function(){this._stripe=Stripe(this.stripePublishableKey),this._elements=this._stripe.elements()},mounted:function(){this.showExisting&&_.isObject(this.value)&&this.value.stripeToken&&this.value.billingCardBrand&&this.value.billingCardLast4&&(this.existingCardData=_.extend({},this.value)),this._element=this._elements.create("card",{classes:{focus:"pseudofocused"},style:{base:{lineHeight:"36px",fontSize:"16px",color:"#495057",iconColor:"#14acc2",fontFamily:'-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif',"::placeholder":{color:"#6c757d"}},invalid:{color:"#dc3545"}}}),this._element.mount($(this.$el).find("[card-element]")[0]),this._element.on("change",(stripeEvent=>{if(stripeEvent.error)this.$emit("input","");else if(stripeEvent.complete){if(this.isSyncing)return;this.$emit(""),this.isSyncing=!0,this.$emit("update:busy",!0),this.isValidated=!1,this._fetchNewToken()}}))},beforeDestroy:function(){this._element.unmount()},methods:{clickChangeExistingCard:function(){this.existingCardData=void 0,this.$emit("input","")},doGetNewToken:function(){this.isSyncing=!0,this.$emit("update:busy",!0),this.isValidated=!1,this.$emit("input",""),this._fetchNewToken()},_fetchNewToken:function(){this._getStripeTokenFromCardElement(this._stripe,this._element).then((paymentSourceInfo=>{this.isSyncing=!1,this.$emit("update:busy",!1),this.isValidated=!0,this.$emit("input",paymentSourceInfo)})).catch((err=>{throw this.isSyncing=!1,this.$emit("update:busy",!1),this.isValidated=!1,err}))},_getStripeTokenFromCardElement:function(stripeInstance,stripeElement){return new Promise(((resolve,reject)=>{try{stripeInstance.createToken(stripeElement).then((result=>{result&&!result.error?resolve({stripeToken:result.token.id,billingCardBrand:result.token.card.brand,billingCardLast4:result.token.card.last4,billingCardExpMonth:result.token.card.exp_month,billingCardExpYear:result.token.card.exp_year}):resolve()}))}catch(err){console.error("Could not obtain Stripe token:",err),reject(err)}}))}}});