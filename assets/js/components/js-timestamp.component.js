parasails.registerComponent("jsTimestamp",{props:["at","short","format"],data:function(){return{formatType:void 0,formattedTimestamp:"",interval:void 0}},template:"\n  <span>{{formattedTimestamp}}</span>\n  ",beforeMount:function(){if(void 0===this.at)throw new Error('Incomplete usage of <js-timestamp>:  Please specify `at` as a JS timestamp (i.e. epoch ms, a number).  For example: `<js-timestamp :at="something.createdAt">`');if(void 0===this.format)this.formatType="timeago";else{if(!_.contains(["calendar","timeago"],this.format))throw new Error("Unsupported `format` ("+this.format+") passed in to the JS timestamp component! Must be either 'calendar' or 'timeago'.");this.formatType=this.format}if("timeago"===this.formatType&&(this._formatTimeago(),this.interval=setInterval((async()=>{try{this._formatTimeago(),await this.forceRender()}catch(err){throw err.raw=err,new Error("Encountered unexpected error while attempting to automatically re-render <js-timestamp> in the background, as the seconds tick by.  "+err.message)}}),6e4)),"calendar"===this.formatType&&(this.formattedTimestamp=moment(this.at).format("MM-DD-YYYY"),this.short))throw new Error('Invalid usage of <js-timestamp>:  Cannot use `short="true"` at the same time as `format="calendar"`.')},beforeDestroy:function(){"timeago"===this.formatType&&clearInterval(this.interval)},watch:{at:function(){if("timeago"===this.formatType)this._formatTimeago();else{if("calendar"!==this.formatType)throw new Error;this.formattedTimestamp=moment(this.at).format("MM-DD-YYYY")}}},methods:{_formatTimeago:function(){var now=(new Date).getTime(),timeDifference=Math.abs(now-this.at);if(timeDifference<864e5)this.formattedTimestamp=moment(this.at).fromNow();else{let includeTime=!this.short&&timeDifference<26784e5,includeYear=moment(now).format("YYYY")!==moment(this.at).format("YYYY");this.formattedTimestamp=moment(this.at).format("MMMM DD"+(includeYear?", YYYY":"")+(includeTime?" [at] h:mma":""))}}}});