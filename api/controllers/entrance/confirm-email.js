module.exports={friendlyName:"Confirm email",description:"Confirm a new user's email address, or an existing user's request for an email address change,\nthen redirect to either a special landing page (for newly-signed up users), or the account page\n(for existing users who just changed their email address).",inputs:{token:{description:"The confirmation token from the email.",example:"4-32fad81jdaf$329"}},exits:{success:{description:"Email address confirmed and requesting user logged in."},redirect:{description:"Email address confirmed and requesting user logged in.  Since this looks like a browser, redirecting...",responseType:"redirect"},invalidOrExpiredToken:{responseType:"expired",description:"The provided token is expired, invalid, or already used up."},emailAddressNoLongerAvailable:{statusCode:409,viewTemplatePath:"500",description:"The email address is no longer available.",extendedDescription:"This is an edge case that is not always anticipated by websites and APIs.  Since it is pretty rare, the 500 server error page is used as a simple catch-all.  If this becomes important in the future, this could easily be expanded into a custom error page or resolution flow.  But for context: this behavior of showing the 500 server error page mimics how popular apps like Slack behave under the same circumstances."}},fn:async function({token:token}){if(!token)throw"invalidOrExpiredToken";var user=await User.findOne({emailProofToken:token});if(!user||user.emailProofTokenExpiresAt<=Date.now())throw"invalidOrExpiredToken";if("unconfirmed"===user.emailStatus){if(await User.updateOne({id:user.id}).set({emailStatus:"confirmed",emailProofToken:"",emailProofTokenExpiresAt:0}),this.req.session.userId=user.id,sails.hooks.sockets&&await sails.helpers.broadcastSessionChange(this.req),this.req.wantsJSON)return;throw{redirect:"/email/confirmed"}}if("change-requested"===user.emailStatus){if(!user.emailChangeCandidate)throw new Error(`Consistency violation: Could not update Stripe customer because this user record's emailChangeCandidate ("${user.emailChangeCandidate}") is missing.  (This should never happen.)`);if(await User.count({emailAddress:user.emailChangeCandidate})>0)throw"emailAddressNoLongerAvailable";if(sails.config.custom.enableBillingFeatures){let didNotAlreadyHaveCustomerId=!user.stripeCustomerId,stripeCustomerId=await sails.helpers.stripe.saveBillingInfo.with({stripeCustomerId:user.stripeCustomerId,emailAddress:user.emailChangeCandidate}).timeout(5e3).retry();didNotAlreadyHaveCustomerId&&await User.updateOne({id:user.id}).set({stripeCustomerId:stripeCustomerId})}if(await User.updateOne({id:user.id}).set({emailStatus:"confirmed",emailProofToken:"",emailProofTokenExpiresAt:0,emailAddress:user.emailChangeCandidate,emailChangeCandidate:""}),this.req.session.userId=user.id,sails.hooks.sockets&&await sails.helpers.broadcastSessionChange(this.req),this.req.wantsJSON)return;throw{redirect:"/account"}}throw new Error(`Consistency violation: User ${user.id} has an email proof token, but somehow also has an emailStatus of "${user.emailStatus}"!  (This should never happen.)`)}};