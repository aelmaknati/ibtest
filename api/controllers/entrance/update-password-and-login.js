module.exports={friendlyName:"Update password and login",description:"Finish the password recovery flow by setting the new password and logging in the requesting user, based on the authenticity of their token.",inputs:{password:{description:"The new, unencrypted password.",example:"abc123v2",required:!0},token:{description:"The password token that was generated by the `sendPasswordRecoveryEmail` endpoint.",example:"gwa8gs8hgw9h2g9hg29hgwh9asdgh9q34$$$$$asdgasdggds",required:!0}},exits:{success:{description:"Password successfully updated, and requesting user agent is now logged in."},invalidToken:{description:"The provided password token is invalid, expired, or has already been used.",responseType:"expired"}},fn:async function({password:password,token:token}){if(!token)throw"invalidToken";var userRecord=await User.findOne({passwordResetToken:token});if(!userRecord||userRecord.passwordResetTokenExpiresAt<=Date.now())throw"invalidToken";var hashed=await sails.helpers.passwords.hashPassword(password);await User.updateOne({id:userRecord.id}).set({password:hashed,passwordResetToken:"",passwordResetTokenExpiresAt:0}),this.req.session.userId=userRecord.id,sails.hooks.sockets&&await sails.helpers.broadcastSessionChange(this.req)}};